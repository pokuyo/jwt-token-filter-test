<?xml version="1.0" encoding="UTF-8"?>

<configuration>
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender" >
		<encoder>
			<pattern>%d{yyyyMMdd HH:mm:ss.SSS} [%thread] %-3level %logger{5} - %msg %n</pattern>
		</encoder>
	</appender>
	
	<!-- 
	<appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <fileNamePattern>C:\logs\logback\logback-%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">

                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
     -->
    
	<logger name="jdbc" level="OFF" />
	
	<!-- 
	 - jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. 
	 - jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 
	 - jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. 
	 - jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. 
	 - jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
	 -->
	<logger name="jdbc.sqlonly"			level="DEBUG"/>
	<logger name="jdbc.sqltiming"		level="OFF"/>
	<logger name="jdbc.audit"			level="OFF"/>
	<logger name="jdbc.resultset"		level="OFF"/>
	<logger name="jdbc.resultsettable"	level="DEBUG"/>
	<logger name="jdbc.connection"		level="OFF"/>
	
<!-- 	<logger name="com.zaxxer.hikari.pool.PoolBase"		level="ERROR"/> -->
<!--     <logger name="com.zaxxer.hikari.pool.HikariPool"	level="ERROR"/> -->
<!--     <logger name="com.zaxxer.hikari.HikariDataSource"	level="ERROR"/> -->
	
	<root level="DEBUG">
		<appender-ref ref="STDOUT" />
	</root>
	
</configuration>